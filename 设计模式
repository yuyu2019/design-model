工厂模式作业内容：
1、用UML绘制出三种工厂模式的类结构图。
见文件描述：工厂模式类图

2、深刻理解产品族和产品等级结构之间的关系。
产品族：不同产品同一厂家生产
产品等级结构：同一个产品不同产品厂家生产

3、自主完成三种工厂模式的代码实现，理解简单工厂、工厂方法和抽象工厂的区别。
简单工厂：
package com.gperedu.vip.factory;

//�򵥹�������
interface Car {
	public void driver();
}

class AudiCar implements Car {
	public void driver() {
		System.out.println("driver audi");
	}
}

class BaoCar implements Car {
	public void driver() {
		System.out.println("driver baoshijie");
	}
}

class CarFactory {
	public static Car createCar(String car) {
		Car c = null;
		if ("audi".equals(car)) {
			c = new AudiCar();
		} else if ("baoshijie".equals(car)) {
			c = new BaoCar();
		}
		return c;
	}
}

public class SimpleFactoryTest {
	public static void main(String[] args) {
		Car car = CarFactory.createCar("audi");
		car.driver();
	}

}

工厂方法：
package com.gperedu.vip.factory;

interface FactoryMethod{
	Car1 createCar();
}
interface Car1 {
	public void driver();
}

class AudiCar1 implements Car1 {
	public void driver() {
		System.out.println("driver audi");
	}
}

class BaoCar1 implements Car1 {
	public void driver() {
		System.out.println("driver baoshijie");
	}
}
class AudiCarFactory implements FactoryMethod{
	public  Car1 createCar(){
		return new AudiCar1();
	}	
}
class BaoCarFactory implements FactoryMethod {
	public Car1 createCar() {
		return new BaoCar1();
	}	
}

public class FactoryMethodTest {
	public static void main(String[] args){
	FactoryMethod factory = new BaoCarFactory();
    Car1 car1 = factory.createCar();
    car1.driver();
	}
}

抽象工厂：
package com.gperedu.vip.factory;

interface AbstractFactory {
	Fridge createFridge();

	AirCondition createAirCondition();

}

interface Fridge {
	void ice();
}

interface AirCondition {
	void cool();
}

class FridgeA implements Fridge {
	public void ice() {
		System.out.println("ice");
	}
}

class AirConditionA implements AirCondition {
	public void cool() {
		System.out.println("cool");
	}
}

class FactoryA implements AbstractFactory{
	public Fridge createFridge(){
		return new FridgeA();
	}

	public AirCondition createAirCondition(){
		return new AirConditionA();
	}
}
public class AbstractFactoryTest {
	public static void main(String[] args) {
		FactoryA factoryA = new FactoryA();
		factoryA.createFridge().ice();
		
	}
}

单例模式作业内容

1、熟练掌握单例模式的常见写法。
饿汉、懒汉、注册、ThreadLocal
2、总结每种单例写法的优、缺点。
饿汉式单例:优点：没有加任何的锁，执行效率比较高，用户体验比较好
           缺点：浪费内存空间
懒汉式单例:优点：线程安全
           缺点：浪费内存空间
注册式单例:优点：枚举单例：线程安全、防反射、序列化破坏单例模式
                 容器式单例：用于创建实例非常多的情况，便于管理
           缺点：枚举单例：浪费内存空间
                 容器式单例：非线程安全
ThreadLocal单例：优点：能保证在单个线程中是唯一的，天生的线程安全
                  缺点： 不能保证其创建的对象是全局唯一
3、思考破坏单例模式的方式有哪些？并且归纳总结。
序列化和反射
   反射：普通java类可以通过反射获取到构造方法，从而调用构造方法创建新对象。
         但是枚举类方式单例不能通过发射破坏，因为枚举单例反编译后可以看到，枚举类实际内部没有无参构造方法。另外，如果反射想通过调用有参构造方法，
	 去创建实例时，反射机制的调用源码已经做了判断，判断当前调用类是否是枚举，如果是枚举类，则不允许进行反射调用构造方法创建实例对象。
          序列化：序列化方式，当读取文件流生成对象时，如果是object类型，会去检查是否含有构造方法，如果有，会重新newInstance创建新对象。
	  如果是枚举类型，会没有调用new 对象的动作，而是根据枚举名称直接获取枚举值。所以枚举类方式单例不会被反序列化破解
4、梳理内部类的执行逻辑，并画出时序图。
见文件描述：内部类时序图


原型模式课后作业：

见文件描述：原型模式重构业务



代理模式作业内容
1、仿JDK动态代理实现原理，自己手写一遍。
见文件： 代理模式-仿JDK动态代理实现原理
2、思考：为什么JDK动态代理中要求目标类实现的接口数量不能超过65535个？
class文件是一组8字节为基础的二进制流，接口索引计数器interface_count占2字节。也就是16.00000000,00000000 所以，证明
interface_count的数量最多是2^16次方 最大值=65535
这是在JVM的层面上决定了它的数量最多是65535
且在java源码中也可以看到
if (var2.size() > 65535) {
throw new IllegalArgumentException("interface limit exceeded: " + var2.size());
直接做了65535的长度的校验，所以，JDK的动态代理要求，目标类实现的接口数量不能超过65535

3、结合自身的业务场景用代理模式进行重构。
见文件描述：代理模式业务重构


委派模式和策略模式的课后作业
1、举例Spring源码中你见过的委派模式，并画出类关系图。
DispatcherServlet 
类图见文件描述：DispatcherServlet 类图
2、利用策略模式重构一段业务代码。
见文件描述：策略模式业务重构

课后作业
作业内容
1、思考：模板模式除了继承以外，还有哪些实现方式？
静态代理
2、使用适配模式，重构一段需要升级功能且兼容老系统的业务代码。
见文件描述：适配模式业务重构

课后作业
作业内容
1、思考并总结装饰者模式和适配器模式的根本区别。
装饰者模式				                                        适配器模式		
装饰者和被装饰者拥有相同的超类型(可能是抽象类也可能是接口				是为了接口的转换							
注重覆盖、扩展				                                       注重兼容、转换		
前置考虑				                                         后置考虑		
有层级关系				                                        无层级关系		
is-a关系				                                           has-a关系		
2、用Guava API实现GPer社区提问通知的业务场景。
见文件描述：GUAVA



